# -*- coding: mbcs -*-
#
# Abaqus/CAE Release 2022 replay file
# Internal Version: 2021_09_15-22.27.30 176069
# Run by arshi on Fri Aug  5 17:55:30 2022
#

# from driverUtils import executeOnCaeGraphicsStartup
# executeOnCaeGraphicsStartup()
#: Executing "onCaeGraphicsStartup()" in the site directory ...
from abaqus import *
from abaqusConstants import *
session.Viewport(name='Viewport: 1', origin=(0.0, 0.0), width=202.471450805664, 
    height=117.713539123535)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].maximize()
from caeModules import *
from driverUtils import executeOnCaeStartup
executeOnCaeStartup()
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
openMdb(
    pathName='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/model num 1.cae')
#: The model database "D:\Delamination-detection-in-composite-laminates-using-deep-learning\Abacus models\Base vibration model\model num 1.cae" has been opened.
session.viewports['Viewport: 1'].setValues(displayedObject=None)
p = mdb.models['Model-1'].parts['Beam1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    optimizationTasks=OFF, geometricRestrictions=OFF, stopConditions=OFF)
mdb.jobs['Job-2'].setValues(numThreadsPerMpiProcess=1, numCpus=2, numDomains=2, 
    numGPUs=2)
del mdb.jobs['Job-2']
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(width=1.27973, height=0.547446, 
    viewOffsetX=0.00733964, viewOffsetY=-0.00304399)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.14594, 
    farPlane=1.8273, width=0.304249, height=0.130152, viewOffsetX=-0.105319, 
    viewOffsetY=0.170815)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.27851, 
    farPlane=1.90622, width=0.339446, height=0.145209, cameraPosition=(
    0.555486, 1.52301, 0.92798), cameraUpVector=(-0.0574659, 0.215522, 
    -0.974807), cameraTarget=(0.210165, 0.292866, 0.168016), 
    viewOffsetX=-0.117503, viewOffsetY=0.190576)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.39461, 
    farPlane=2.17305, width=0.370271, height=0.158396, cameraPosition=(
    -1.05033, 1.26384, 0.693928), cameraUpVector=(0.364061, 0.34276, 
    -0.866011), cameraTarget=(0.0385582, 0.367146, 0.224569), 
    viewOffsetX=-0.128174, viewOffsetY=0.207882)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.41684, 
    farPlane=2.15082, width=0.168976, height=0.072285, viewOffsetX=-0.0575323, 
    viewOffsetY=0.236817)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.4246, 
    farPlane=2.17239, width=0.169902, height=0.0726807, cameraPosition=(
    -1.16094, 1.24828, 0.514048), cameraUpVector=(0.439026, 0.319102, 
    -0.839899), cameraTarget=(0.000185069, 0.374965, 0.199183), 
    viewOffsetX=-0.0578473, viewOffsetY=0.238113)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.41401, 
    farPlane=2.18298, width=0.230724, height=0.0986995, viewOffsetX=-0.0276905, 
    viewOffsetY=0.213002)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.42722, 
    farPlane=2.20385, width=0.232878, height=0.099621, cameraPosition=(
    -1.26612, 1.23659, 0.200038), cameraUpVector=(0.564858, 0.276437, 
    -0.777507), cameraTarget=(-0.0481852, 0.385917, 0.145067), 
    viewOffsetX=-0.027949, viewOffsetY=0.214991)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.42268, 
    farPlane=2.20839, width=0.247965, height=0.106075, viewOffsetX=-0.00959937, 
    viewOffsetY=0.201836)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Beam1-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#0 #403 ]', ), )
leaf = dgm.LeafFromGeometry(faceSeq=faces1)
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.replace(
    leaf=leaf)
leaf = dgm.Leaf(leafType=DEFAULT_MODEL)
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.replace(
    leaf=leaf)
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Beam1-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#0 #403 ]', ), )
leaf = dgm.LeafFromGeometry(faceSeq=faces1)
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.replace(
    leaf=leaf)
leaf = dgm.Leaf(leafType=DEFAULT_MODEL)
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.replace(
    leaf=leaf)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.2873, 
    farPlane=1.60901, width=1.05377, height=0.477986, cameraUpVector=(0.332846, 
    0.942981, 0))
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.00955, 
    farPlane=1.88676, width=0.826404, height=0.374854, cameraPosition=(
    -0.522627, 1.1286, 0.854082), cameraUpVector=(0.492261, 0.792226, 
    -0.360636), cameraTarget=(0.256, 0.256, 1.46683e-07))
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.03756, 
    farPlane=1.85874, width=0.849336, height=0.385255, cameraPosition=(
    -0.522627, 1.1286, 0.854082), cameraUpVector=(0.598354, 0.765499, 
    -0.236609), cameraTarget=(0.256, 0.256, 1.41561e-07))
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.02309, 
    farPlane=1.87322, width=0.837488, height=0.379881, cameraPosition=(
    -0.787524, 0.948051, -0.727505), cameraUpVector=(0.683157, 0.613199, 
    -0.39659), cameraTarget=(0.256, 0.256, 3.21865e-06))
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.06743, 
    farPlane=1.82887, width=0.500673, height=0.227103, viewOffsetX=0.141913, 
    viewOffsetY=-0.0428073)
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Beam2-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#f ]', ), )
f2 = a.instances['Beam3-1'].faces
faces2 = f2.getSequenceFromMask(mask=('[#f ]', ), )
leaf = dgm.LeafFromGeometry(faceSeq=faces1+faces2)
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.remove(leaf=leaf)
leaf = dgm.Leaf(leafType=DEFAULT_MODEL)
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.replace(
    leaf=leaf)
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Beam1-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#1818000 ]', ), )
leaf = dgm.LeafFromGeometry(faceSeq=faces1)
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.remove(leaf=leaf)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.11581, 
    farPlane=1.78049, width=0.171833, height=0.0779427, viewOffsetX=0.168899, 
    viewOffsetY=-0.0293116)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    renderBeamProfiles=ON, renderShellThickness=ON)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.11712, 
    farPlane=1.77918, width=0.172034, height=0.0780341, cameraPosition=(
    -0.75061, 0.994517, -0.736252), cameraUpVector=(0.626661, 0.758946, 
    -0.176909), cameraTarget=(0.292914, 0.302466, -0.00874327), 
    viewOffsetX=0.169097, viewOffsetY=-0.029346)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.15877, 
    farPlane=1.90581, width=0.178448, height=0.0809433, cameraPosition=(
    -1.00156, 1.11624, -0.18682), cameraUpVector=(0.522566, 0.846873, 
    -0.098645), cameraTarget=(0.231985, 0.37251, -0.0371973), 
    viewOffsetX=0.175401, viewOffsetY=-0.0304401)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.17582, 
    farPlane=1.88876, width=0.0525277, height=0.0238263, viewOffsetX=0.0630021, 
    viewOffsetY=-0.0235668)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.17539, 
    farPlane=1.88919, width=0.0525083, height=0.0238175, cameraPosition=(
    -0.993232, 1.13137, -0.180278), cameraUpVector=(0.503253, 0.856994, 
    0.110893), cameraTarget=(0.240313, 0.387639, -0.0306556), 
    viewOffsetX=0.0629788, viewOffsetY=-0.0235581)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.18549, 
    farPlane=1.8437, width=0.0529596, height=0.0240222, cameraPosition=(
    -0.887253, 1.0412, -0.618381), cameraUpVector=(0.449867, 0.884238, 
    0.125472), cameraTarget=(0.264789, 0.374186, -0.04825), 
    viewOffsetX=0.0635201, viewOffsetY=-0.0237606)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.14351, 
    farPlane=1.88568, width=0.376087, height=0.170592, viewOffsetX=0.125704, 
    viewOffsetY=-0.00376186)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.1405, 
    farPlane=1.8887, width=0.375096, height=0.170142, cameraPosition=(-0.86199, 
    1.18085, -0.50605), cameraUpVector=(-0.185986, 0.432759, 0.882116), 
    cameraTarget=(0.290052, 0.513834, 0.0640811), viewOffsetX=0.125372, 
    viewOffsetY=-0.00375194)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.11826, 
    farPlane=1.64596, width=0.367781, height=0.166824, cameraPosition=(
    -0.348201, -0.147222, -1.18154), cameraUpVector=(-0.231871, 0.938484, 
    -0.255896), cameraTarget=(0.354765, 0.344578, -0.0148618), 
    viewOffsetX=0.122927, viewOffsetY=-0.00367877)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.09737, 
    farPlane=1.66685, width=0.495798, height=0.224892, viewOffsetX=0.254396, 
    viewOffsetY=0.132191)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.10148, 
    farPlane=1.66274, width=0.497655, height=0.225734, cameraPosition=(
    -0.563609, 0.286723, -1.23467), cameraUpVector=(-0.860276, 0.0212639, 
    0.509385), cameraTarget=(0.139357, 0.778523, -0.0679954), 
    viewOffsetX=0.255349, viewOffsetY=0.132686)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.23633, 
    farPlane=1.97019, width=0.558579, height=0.253369, cameraPosition=(
    -0.319833, 1.80364, -0.284953), cameraUpVector=(-0.93826, -0.33936, 
    0.0670975), cameraTarget=(0.161231, 0.602014, 0.364535), 
    viewOffsetX=0.286609, viewOffsetY=0.14893)
#: 
#: Point 1: 25.6E-03, 506.E-03, -300.E-06  Point 2: 25.6E-03, 506.E-03, 300.E-06
#:    Distance: 600.E-06  Components: 0., 0., 600.E-06
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.30207, 
    farPlane=1.90445, width=0.0264728, height=0.012008, viewOffsetX=0.352038, 
    viewOffsetY=0.136787)
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=ON, 
    engineeringFeatures=ON)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=OFF)
p = mdb.models['Model-1'].parts['Beam1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['Beam2']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['Beam3']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
session.Viewport(name='Viewport: 2', origin=(136.996, -6.56771), width=136.996, 
    height=124.281)
session.viewports['Viewport: 1'].restore()
session.viewports['Viewport: 1'].setValues(origin=(0, -6.56771), width=136.996, 
    height=124.281)
p = mdb.models['Model-1'].parts['Beam3']
f = p.faces
faces = f.getSequenceFromMask(mask=('[#2 ]', ), )
region = regionToolset.Region(faces=faces)
detp = section.MdbPlyStackPlot(part=p, region=region)
session.viewports['Viewport: 2'].setValues(displayedObject=detp)
session.viewports['Viewport: 2'].viewportAnnotationOptions.setValues(
triadColor='Yellow', triadLabels=NUMBERS)
session.viewports['Viewport: 2'].view.setViewpoint(viewVector=(1, -1, 1), 
    cameraUpVector=(0, 0, 1))
session.viewports['Viewport: 2'].view.setValues(nearPlane=2.35761, 
    farPlane=5.18051, width=1.72464, height=1.49021, viewOffsetX=0.0773202, 
    viewOffsetY=-0.0480697)
p = mdb.models['Model-1'].parts['Beam2']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
session.Viewport(name='Viewport: 3', origin=(136.996, -6.56771), width=136.996, 
    height=124.281)
session.viewports['Viewport: 1'].restore()
session.viewports['Viewport: 1'].setValues(origin=(0, -6.56771), width=136.996, 
    height=124.281)
p = mdb.models['Model-1'].parts['Beam2']
f = p.faces
faces = f.getSequenceFromMask(mask=('[#2 ]', ), )
region = regionToolset.Region(faces=faces)
detp = section.MdbPlyStackPlot(part=p, region=region)
session.viewports['Viewport: 3'].setValues(displayedObject=detp)
session.viewports['Viewport: 3'].viewportAnnotationOptions.setValues(
triadColor='Yellow', triadLabels=NUMBERS)
session.viewports['Viewport: 3'].view.setViewpoint(viewVector=(1, -1, 1), 
    cameraUpVector=(0, 0, 1))
del session.viewports['Viewport: 3']
del session.viewports['Viewport: 2']
session.viewports['Viewport: 1'].maximize()
a1 = mdb.models['Model-1'].rootAssembly
a1.regenerate()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.25949, 
    farPlane=1.94702, width=0.375408, height=0.179974, viewOffsetX=0.400926, 
    viewOffsetY=0.134389)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.26985, 
    farPlane=2.36121, width=1.43977, height=0.615905, viewOffsetX=0.0673719, 
    viewOffsetY=0.150172)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.27628, 
    farPlane=2.3682, width=1.44706, height=0.619024, cameraPosition=(-1.14206, 
    1.30269, -0.529853), cameraUpVector=(0.874188, 0.482036, -0.0586219), 
    cameraTarget=(-0.0424797, 0.385059, -0.131234), viewOffsetX=0.067713, 
    viewOffsetY=0.150933)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.56802, 
    farPlane=2.07993, width=1.77784, height=0.760524, cameraPosition=(
    -0.113807, 0.176804, 1.78765), cameraUpVector=(0.066155, 0.937392, 
    -0.341935), cameraTarget=(0.178723, 0.153192, 0.330289), 
    viewOffsetX=0.0831912, viewOffsetY=0.185434)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.4726, 
    farPlane=2.3304, width=1.66965, height=0.714244, cameraPosition=(1.17174, 
    0.552043, 1.64478), cameraUpVector=(-0.248825, 0.847522, -0.46882), 
    cameraTarget=(0.441464, 0.228735, 0.390908), viewOffsetX=0.0781287, 
    viewOffsetY=0.17415)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.55949, 
    farPlane=2.24351, width=1.07782, height=0.46107, viewOffsetX=0.0290329, 
    viewOffsetY=0.102826)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U3 PI: BEAM1-1 Node 77 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.XYPlot('XYPlot-1')
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U2 PI: BEAM1-1 Node 73 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U1 PI: BEAM1-1 Node 77 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U3 PI: BEAM1-1 Node 77 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.57558, 
    farPlane=2.22742, width=1.09787, height=0.469647, viewOffsetX=0.021785, 
    viewOffsetY=0.110482)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    DEFORMED, ))
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=SCALE_FACTOR)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=HARMONIC)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.50343, 
    farPlane=2.29957, width=1.62871, height=0.696733, viewOffsetX=0.0871269, 
    viewOffsetY=0.146795)
mdb.save()
#: The model database has been saved to "D:\Delamination-detection-in-composite-laminates-using-deep-learning\Abacus models\Base vibration model\model num 1.cae".

---------- RUNTIME EXCEPTION HAS OCCURRED ----------
*** ERROR: ABAQUS/ABQcaeK rank 0 received the ABORT signal
