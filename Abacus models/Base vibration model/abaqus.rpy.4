# -*- coding: mbcs -*-
#
# Abaqus/CAE Release 2022 replay file
# Internal Version: 2021_09_15-22.27.30 176069
# Run by 795593 on Thu Aug 11 12:09:44 2022
#

# from driverUtils import executeOnCaeGraphicsStartup
# executeOnCaeGraphicsStartup()
#: Executing "onCaeGraphicsStartup()" in the site directory ...
from abaqus import *
from abaqusConstants import *
session.Viewport(name='Viewport: 1', origin=(0.0, 0.0), width=291.390625, 
    height=197.092590332031)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].maximize()
from caeModules import *
from driverUtils import executeOnCaeStartup
executeOnCaeStartup()
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
openMdb(
    pathName='C:/Users/795593/OneDrive/Desktop/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/main-model.cae')
#: The model database "C:\Users\795593\OneDrive\Desktop\Delamination-detection-in-composite-laminates-using-deep-learning\Abacus models\Base vibration model\main-model.cae" has been opened.
session.viewports['Viewport: 1'].setValues(displayedObject=None)
p = mdb.models['Delamination-Case-1'].parts['Beam1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
cliCommand("""from part import *""")
cliCommand("""from material import *""")
cliCommand("""from section import *""")
cliCommand("""from assembly import *""")
cliCommand("""from step import *""")
cliCommand("""from interaction import *""")
cliCommand("""from load import *""")
cliCommand("""from mesh import *""")
cliCommand("""from optimization import *""")
cliCommand("""from job import *""")
cliCommand("""from sketch import *""")
cliCommand("""from visualization import *""")
cliCommand("""from connectorBehavior import *""")
cliCommand("""def moveBeam2(caseDelaminationNum=4):
    if caseDelaminationNum<11:
        mdb.models['Delamination-Case-{}'.format(caseDelaminationNum)].rootAssembly.translate(instanceList=(
        'Beam2-1', ), vector=(0.0512*(caseDelaminationNum-1), 0.0, 0.0))
        mdb.models['Delamination-Case-{}'.format(caseDelaminationNum)].rootAssembly.translate(instanceList=(
        'Beam3-1', ), vector=(0.0512*(caseDelaminationNum-1), 0.0, 0.0))
    if caseDelaminationNum>10:
        if caseDelaminationNum>10 and caseDelaminationNum<21:
            cte_num = caseDelaminationNum - 10
            cte_num2 = -1
        if caseDelaminationNum>20 and caseDelaminationNum<31:
            cte_num = caseDelaminationNum - 20
            cte_num2 = -2
        if caseDelaminationNum>30 and caseDelaminationNum<41:
            cte_num = caseDelaminationNum - 30
            cte_num2 = -3
        if caseDelaminationNum>40 and caseDelaminationNum<51:
            cte_num = caseDelaminationNum - 40
            cte_num2 = -4
        if caseDelaminationNum>50 and caseDelaminationNum<61:
            cte_num = caseDelaminationNum - 50
            cte_num2 = -5
        if caseDelaminationNum>60 and caseDelaminationNum<71:
            cte_num = caseDelaminationNum - 60
            cte_num2 = -6
        if caseDelaminationNum>70 and caseDelaminationNum<81:
            cte_num = caseDelaminationNum - 70
            cte_num2 = -7
        if caseDelaminationNum>80 and caseDelaminationNum<91:
            cte_num = caseDelaminationNum - 80
            cte_num2 = -8
        if caseDelaminationNum>90 and caseDelaminationNum<101:
            cte_num = caseDelaminationNum - 90
            cte_num2 = -9
        else:
            cte_num = caseDelaminationNum
            cte_num2 = 0
    mdb.models['Delamination-Case-{}'.format(caseDelaminationNum)].rootAssembly.translate(instanceList=(
    'Beam2-1', ), vector=(0.0512*(cte_num-1), cte_num2*0.0512, 0.0))
    mdb.models['Delamination-Case-{}'.format(caseDelaminationNum)].rootAssembly.translate(instanceList=(
    'Beam3-1', ), vector=(0.0512*(cte_num-1), cte_num2*0.0512, 0.0))
    # if caseDelaminationNum>20 and caseDelaminationNum<31:
    #     cte_num = caseDelaminationNum - 20
    #     mdb.models['Delamination-Case-{}'.format(caseDelaminationNum)].rootAssembly.translate(instanceList=(
    #     'Beam2-1', ), vector=(0.0512*(cte_num-1), -2*0.0512, 0.0))
    #     mdb.models['Delamination-Case-{}'.format(caseDelaminationNum)].rootAssembly.translate(instanceList=(
    #     'Beam3-1', ), vector=(0.0512*(cte_num-1), -2*0.0512, 0.0))
""")
cliCommand("""import time""")
cliCommand("""from initial import initial""")
cliCommand("""initial()""")
cliCommand("""from delamination_hole_onBeam1 import move_delamination_onBeam1""")
cliCommand("""from move_Beam1andBeam2 import moveBeam2""")
cliCommand("""from edit_partitionOfBeam1 import EditPartitionBEam1""")
cliCommand("""from edit_mesh import edit_mesh""")
cliCommand("""from submit_TheJob import Submit_the_job""")
cliCommand("""from copy_the_case_delamination1 import copy_the_caseDelamination1""")
cliCommand("""import os""")
cliCommand("""# i = 91""")
cliCommand("""for i in range(2, 101):
    copy_the_caseDelamination1(i)
    move_delamination_onBeam1(i)
    moveBeam2(i)
    EditPartitionBEam1(i)
    edit_mesh(i)
    time.sleep(0.5)
    # Submit_the_job(i)
    # while os.path.exists('C:\\\\Users\\\\795593\\\\OneDrive\\\\Desktop\\\\Delamination-detection-in-composite-laminates-using-deep-learning\\Abacus models\\\\Base vibration model/Job-{}.023'.format(index)) == False:
    #     time.sleep(0.1)
    # while os.path.exists('C:\\\\Users\\\\795593\\\\OneDrive\\\\Desktop\\\\Delamination-detection-in-composite-laminates-using-deep-learning\\Abacus models\\\\Base vibration model/Job-{}.023'.format(index)):
    #     time.sleep(0.1)
""")
#: The model "Delamination-Case-2" has been created.
#: Warning: Mesh deleted in 6 regions due to geometry association failure.
#* UnboundLocalError: local variable 'cte_num' referenced before assignment
#* File 
#* "C:\Users\795593\OneDrive\Desktop\Delamination-detection-in-composite-laminates-using-deep-learning\Abacus 
#* models/python\move_Beam1andBeam2.py", line 54, in moveBeam2
#*     'Beam2-1', ), vector=(0.0512*(cte_num-1), cte_num2*0.0512, 0.0))
