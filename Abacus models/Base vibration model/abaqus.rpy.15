# -*- coding: mbcs -*-
#
# Abaqus/CAE Release 2022 replay file
# Internal Version: 2021_09_15-22.27.30 176069
# Run by arshi on Fri Aug  5 13:23:35 2022
#

# from driverUtils import executeOnCaeGraphicsStartup
# executeOnCaeGraphicsStartup()
#: Executing "onCaeGraphicsStartup()" in the site directory ...
from abaqus import *
from abaqusConstants import *
session.Viewport(name='Viewport: 1', origin=(0.0, 0.0), width=202.471450805664, 
    height=117.713539123535)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].maximize()
from caeModules import *
from driverUtils import executeOnCaeStartup
executeOnCaeStartup()
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
openMdb(
    pathName='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/model num 1.cae')
#: The model database "D:\Delamination-detection-in-composite-laminates-using-deep-learning\Abacus models\Base vibration model\model num 1.cae" has been opened.
session.viewports['Viewport: 1'].setValues(displayedObject=None)
p = mdb.models['Model-1'].parts['Beam1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    optimizationTasks=OFF, geometricRestrictions=OFF, stopConditions=OFF)
del mdb.jobs['Job-1']
mdb.Job(name='Job-1', model='Model-1', description='', type=ANALYSIS, 
    atTime=None, waitMinutes=0, waitHours=0, queue=None, memory=90, 
    memoryUnits=PERCENTAGE, getMemoryFromAnalysis=True, 
    explicitPrecision=SINGLE, nodalOutputPrecision=SINGLE, echoPrint=OFF, 
    modelPrint=OFF, contactPrint=OFF, historyPrint=OFF, userSubroutine='', 
    scratch='', resultsFormat=ODB, numThreadsPerMpiProcess=1, 
    multiprocessingMode=DEFAULT, numCpus=1, numGPUs=0)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=ON, 
    constraints=ON, connectors=ON, engineeringFeatures=ON)
del mdb.models['Model-1'].constraints['Constraint-1']
del mdb.models['Model-1'].constraints['Constraint-2']
del mdb.models['Model-1'].interactions['Int-1']
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=OFF, 
    constraints=OFF, connectors=OFF, engineeringFeatures=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       3
#: Number of Node Sets:          3
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.55954, 
    farPlane=2.81026, width=0.819858, height=0.35072, viewOffsetX=0.0331005, 
    viewOffsetY=0.0161347)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.55134, 
    farPlane=2.81846, width=0.981894, height=0.420036, viewOffsetX=0.0383992, 
    viewOffsetY=0.11111)
session.animationOptions.setValues(frameRate=43)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.59386, 
    farPlane=2.77593, width=0.656868, height=0.280996, viewOffsetX=0.0417514, 
    viewOffsetY=0.0435591)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['Job-1'].kill()
#: Error in job Job-1: Process terminated by external request (SIGTERM or SIGINT received).
#: Job Job-1: Abaqus/Standard was terminated prior to analysis completion.
a = mdb.models['Model-1'].rootAssembly
p = mdb.models['Model-1'].parts['Beam2']
a.Instance(name='Beam2-1', part=p, dependent=ON)
#: Error in job Job-1: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
a = mdb.models['Model-1'].rootAssembly
a.translate(instanceList=('Beam2-1', ), vector=(0.0256, 0.486, 0.0003))
#: The instance Beam2-1 was translated by 25.6E-03, 486.E-03, 300.E-06 with respect to the assembly coordinate system
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=ON, 
    constraints=ON, connectors=ON, engineeringFeatures=ON)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.34764, 
    farPlane=1.66151, width=0.974551, height=0.442052, viewOffsetX=-0.0223587, 
    viewOffsetY=0.0255085)
a = mdb.models['Model-1'].rootAssembly
region1=a.instances['Beam1-1'].surfaces['inside']
a = mdb.models['Model-1'].rootAssembly
region2=a.instances['Beam2-1'].surfaces['outside']
mdb.models['Model-1'].Tie(name='Constraint-1', main=region1, secondary=region2, 
    positionToleranceMethod=COMPUTED, adjust=ON, tieRotations=ON, thickness=ON)
mdb.models['Model-1'].constraints['Constraint-1'].setValues(
    positionToleranceMethod=SPECIFIED, positionTolerance=0.0025)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON, 
    interactions=OFF, constraints=OFF, connectors=OFF, engineeringFeatures=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
p1 = mdb.models['Model-1'].parts['Beam1']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
session.viewports['Viewport: 1'].partDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=OFF)
p = mdb.models['Model-1'].parts['Beam1']
s = p.features['Partition face-1'].sketch
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=s)
s1 = mdb.models['Model-1'].sketches['__edit__']
g, v, d, c = s1.geometry, s1.vertices, s1.dimensions, s1.constraints
s1.setPrimaryObject(option=SUPERIMPOSE)
p.projectReferencesOntoSketch(sketch=s1, 
    upToFeature=p.features['Partition face-1'], filter=COPLANAR_EDGES)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.42663, 
    farPlane=1.46968, width=0.145536, height=0.0697716, cameraPosition=(
    0.0859549, 0.481538, 1.44815), cameraTarget=(0.0859549, 0.481538, 0))
s1.unsetPrimaryObject()
del mdb.models['Model-1'].sketches['__edit__']
p = mdb.models['Model-1'].parts['Beam1']
p.deleteMesh()
p = mdb.models['Model-1'].parts['Beam1']
s = p.features['Partition face-1'].sketch
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=s)
s2 = mdb.models['Model-1'].sketches['__edit__']
g, v, d, c = s2.geometry, s2.vertices, s2.dimensions, s2.constraints
s2.setPrimaryObject(option=SUPERIMPOSE)
p.projectReferencesOntoSketch(sketch=s2, 
    upToFeature=p.features['Partition face-1'], filter=COPLANAR_EDGES)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.42223, 
    farPlane=1.47408, width=0.175222, height=0.084003, cameraPosition=(
    0.0903851, 0.481171, 1.44815), cameraTarget=(0.0903851, 0.481171, 0))
s2.copyMove(vector=(-0.0512, 0.0), objectList=(g[8], ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.36888, 
    farPlane=1.52743, width=0.606462, height=0.290744, cameraPosition=(
    0.145506, 0.471735, 1.44815), cameraTarget=(0.145506, 0.471735, 0))
s2.copyMove(vector=(0.0, 0.0512), objectList=(g[17], ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.38626, 
    farPlane=1.51005, width=0.41838, height=0.200576, cameraPosition=(0.107695, 
    0.476713, 1.44815), cameraTarget=(0.107695, 0.476713, 0))
s2.Line(point1=(-0.20591, 0.20591), point2=(-0.27, 0.27))
s2.CoincidentConstraint(entity1=v[50], entity2=g[27], addUndoState=False)
s2.Line(point1=(-0.25711, 0.20591), point2=(-0.20591, 0.25711))
s2.Line(point1=(-0.25711, 0.20591), point2=(-0.257110000036611, 
    0.257110000214196))
s2.VerticalConstraint(entity=g[31], addUndoState=False)
s2.CoincidentConstraint(entity1=v[52], entity2=g[29], addUndoState=False)
s2.autoTrimCurve(curve1=g[29], point1=(-0.262302384123802, 0.262323582992554))
s2.delete(objectList=(g[31], ))
s2.unsetPrimaryObject()
p = mdb.models['Model-1'].parts['Beam1']
p.features['Partition face-1'].setValues(sketch=s2)
del mdb.models['Model-1'].sketches['__edit__']
p = mdb.models['Model-1'].parts['Beam1']
p.regenerate()
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.2978, 
    farPlane=1.59851, width=1.13966, height=0.518854, viewOffsetX=0.0141937, 
    viewOffsetY=0.0222234)
p = mdb.models['Model-1'].parts['Beam1']
f = p.faces
pickedRegions = f.getSequenceFromMask(mask=('[#ffffffff:3 #7f ]', ), )
p.setMeshControls(regions=pickedRegions, technique=SWEEP)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.28008, 
    farPlane=1.61623, width=1.27218, height=0.579183, viewOffsetX=0.0383158, 
    viewOffsetY=0.00308082)
p = mdb.models['Model-1'].parts['Beam1']
e = p.edges
pickedEdges = e.getSequenceFromMask(mask=('[#ffffffff:7 #1f ]', ), )
p.seedEdgeBySize(edges=pickedEdges, size=0.01, deviationFactor=0.1, 
    minSizeFactor=0.1, constraint=FINER)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.3683, 
    farPlane=1.52801, width=0.539737, height=0.245726, viewOffsetX=-0.132997, 
    viewOffsetY=0.159819)
p = mdb.models['Model-1'].parts['Beam1']
p.generateMesh()
#: 
#: Part: Beam1
#:   Number of elements :  2515,   Analysis errors:  0 (0%),  Analysis warnings:  4 (0.159046%)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.38792, 
    farPlane=1.50839, width=0.406749, height=0.18518, viewOffsetX=-0.126338, 
    viewOffsetY=0.169723)
p = mdb.models['Model-1'].parts['Beam1']
f = p.faces
pickedRegions = f.getSequenceFromMask(mask=('[#1818000 #400802 #85020201 ]', ), 
    )
p.deleteMesh(regions=pickedRegions)
p = mdb.models['Model-1'].parts['Beam1']
e = p.edges
pickedEdges = e.getSequenceFromMask(mask=('[#0 #c0003d00 #3 ]', ), )
p.seedEdgeBySize(edges=pickedEdges, size=0.005, deviationFactor=0.1, 
    minSizeFactor=0.1, constraint=FINER)
p = mdb.models['Model-1'].parts['Beam1']
p.generateMesh()
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.40343, 
    farPlane=1.49288, width=0.301849, height=0.137423, viewOffsetX=-0.16663, 
    viewOffsetY=0.181323)
p = mdb.models['Model-1'].parts['Beam1']
f = p.faces
pickedRegions = f.getSequenceFromMask(mask=('[#81c1c225 #400a03 #85020201 ]', 
    ), )
p.deleteMesh(regions=pickedRegions)
p = mdb.models['Model-1'].parts['Beam1']
e = p.edges
pickedEdges = e.getSequenceFromMask(mask=('[#0 #e0007f00 #7 ]', ), )
p.seedEdgeBySize(edges=pickedEdges, size=0.005, deviationFactor=0.1, 
    minSizeFactor=0.1, constraint=FINER)
p = mdb.models['Model-1'].parts['Beam1']
p.generateMesh()
#: 
#: Part: Beam1
#:   Number of elements :  3045,   Analysis errors:  0 (0%),  Analysis warnings:  0 (0%)
#: 
#: Part: Beam1
#:   Number of elements :  3045,   Analysis errors:  0 (0%),  Analysis warnings:  0 (0%)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.38, 
    farPlane=1.51631, width=0.518, height=0.23583, viewOffsetX=-0.0858144, 
    viewOffsetY=0.16555)
p = mdb.models['Model-1'].parts['Beam2']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['Beam3']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['Beam2']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a1 = mdb.models['Model-1'].rootAssembly
a1.regenerate()
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.4315, 
    farPlane=1.57765, width=0.49267, height=0.224298, viewOffsetX=-0.125812, 
    viewOffsetY=0.136096)
p = mdb.models['Model-1'].parts['Beam2']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['Beam3']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['Beam3']
p.deleteMesh()
p = mdb.models['Model-1'].parts['Beam2']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['Beam2']
p.deleteMesh()
p = mdb.models['Model-1'].parts['Beam2']
p.seedPart(size=0.005, deviationFactor=0.1, minSizeFactor=0.1)
p = mdb.models['Model-1'].parts['Beam2']
p.generateMesh()
p = mdb.models['Model-1'].parts['Beam2']
s = p.features['Partition face-1'].sketch
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=s)
s1 = mdb.models['Model-1'].sketches['__edit__']
g, v, d, c = s1.geometry, s1.vertices, s1.dimensions, s1.constraints
s1.setPrimaryObject(option=SUPERIMPOSE)
p.projectReferencesOntoSketch(sketch=s1, 
    upToFeature=p.features['Partition face-1'], filter=COPLANAR_EDGES)
s1.Line(point1=(0.0, 0.0), point2=(-0.02025, -0.02025))
s1.Line(point1=(0.0, 0.0), point2=(0.0195, 0.0195))
s1.Line(point1=(0.0, 0.0), point2=(-0.024, 0.0195))
s1.Line(point1=(0.0, 0.0), point2=(0.027, -0.024))
s1.AngularDimension(line1=g[13], line2=g[7], textPoint=(-0.0170429907739162, 
    -0.0052499994635582), value=45.0)
s1.AngularDimension(line1=g[16], line2=g[11], textPoint=(0.0115973055362701, 
    -0.00585576891899109), value=45.0)
s1.AngularDimension(line1=g[14], line2=g[11], textPoint=(0.0140176117420197, 
    0.00504807941615582), value=45.0)
s1.AngularDimension(line1=g[15], line2=g[7], textPoint=(-0.0154294557869434, 
    0.00525000132620335), value=45.0)
s1.unsetPrimaryObject()
p = mdb.models['Model-1'].parts['Beam2']
p.features['Partition face-1'].setValues(sketch=s1)
del mdb.models['Model-1'].sketches['__edit__']
p = mdb.models['Model-1'].parts['Beam2']
p.regenerate()
#: Warning: Failed to attach mesh to part geometry.
p = mdb.models['Model-1'].parts['Beam2']
f = p.faces
pickedRegions = f.getSequenceFromMask(mask=('[#ff ]', ), )
p.setMeshControls(regions=pickedRegions, elemShape=QUAD, technique=STRUCTURED)
p = mdb.models['Model-1'].parts['Beam2']
s = p.features['Partition face-1'].sketch
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=s)
s2 = mdb.models['Model-1'].sketches['__edit__']
g, v, d, c = s2.geometry, s2.vertices, s2.dimensions, s2.constraints
s2.setPrimaryObject(option=SUPERIMPOSE)
p.projectReferencesOntoSketch(sketch=s2, 
    upToFeature=p.features['Partition face-1'], filter=COPLANAR_EDGES)
s2.delete(objectList=(g[7], ))
s2.delete(objectList=(g[11], ))
s2.delete(objectList=(g[8], ))
s2.delete(objectList=(g[12], ))
s2.unsetPrimaryObject()
p = mdb.models['Model-1'].parts['Beam2']
p.features['Partition face-1'].setValues(sketch=s2)
del mdb.models['Model-1'].sketches['__edit__']
p = mdb.models['Model-1'].parts['Beam2']
p.regenerate()
p = mdb.models['Model-1'].parts['Beam2']
p.generateMesh()
session.viewports['Viewport: 1'].view.setValues(nearPlane=0.100284, 
    farPlane=0.12599, width=0.0984516, height=0.044822, viewOffsetX=0.00136942, 
    viewOffsetY=0.000293248)
p = mdb.models['Model-1'].parts['Beam2']
p.deleteMesh()
p = mdb.models['Model-1'].parts['Beam2']
s = p.features['Partition face-1'].sketch
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=s)
s1 = mdb.models['Model-1'].sketches['__edit__']
g, v, d, c = s1.geometry, s1.vertices, s1.dimensions, s1.constraints
s1.setPrimaryObject(option=SUPERIMPOSE)
p.projectReferencesOntoSketch(sketch=s1, 
    upToFeature=p.features['Partition face-1'], filter=COPLANAR_EDGES)
s1.Line(point1=(-0.024, 0.0), point2=(0.027, 0.0))
s1.HorizontalConstraint(entity=g[17], addUndoState=False)
s1.Line(point1=(0.0, 0.024), point2=(0.0, -0.0239999999878928))
s1.VerticalConstraint(entity=g[18], addUndoState=False)
s1.delete(objectList=(g[15], ))
s1.delete(objectList=(g[16], ))
s1.delete(objectList=(g[14], ))
s1.delete(objectList=(g[13], ))
s1.unsetPrimaryObject()
p = mdb.models['Model-1'].parts['Beam2']
p.features['Partition face-1'].setValues(sketch=s1)
del mdb.models['Model-1'].sketches['__edit__']
p = mdb.models['Model-1'].parts['Beam2']
p.regenerate()
p = mdb.models['Model-1'].parts['Beam1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['Beam2']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['Beam2']
p.generateMesh()
p = mdb.models['Model-1'].parts['Beam1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a1 = mdb.models['Model-1'].rootAssembly
a1.regenerate()
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.39324, 
    farPlane=1.61591, width=0.843696, height=0.384109, viewOffsetX=-0.109912, 
    viewOffsetY=0.108279)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.14375, 
    farPlane=2.02058, width=0.692615, height=0.332047, cameraPosition=(
    -1.20658, -0.299076, 0.272154), cameraUpVector=(0.21934, 0.131873, 
    0.966695), cameraTarget=(0.146687, 0.237792, -0.108137), 
    viewOffsetX=-0.0902297, viewOffsetY=0.0888893)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.18307, 
    farPlane=1.98125, width=0.525789, height=0.252069, viewOffsetX=-0.116531, 
    viewOffsetY=0.0876436)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.2284, 
    farPlane=1.99321, width=0.545936, height=0.261727, cameraPosition=(-1.2536, 
    -0.167529, -0.375726), cameraUpVector=(-0.267209, 0.296273, 0.916963), 
    cameraTarget=(0.169797, 0.226852, -0.0883648), viewOffsetX=-0.120996, 
    viewOffsetY=0.0910018)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.28439, 
    farPlane=1.93722, width=0.130884, height=0.0627472, viewOffsetX=-0.190673, 
    viewOffsetY=0.1648)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.23032, 
    farPlane=1.92475, width=0.125374, height=0.0601056, cameraPosition=(
    -1.15616, -0.393695, 0.30195), cameraUpVector=(0.201167, 0.207415, 
    0.957346), cameraTarget=(0.146986, 0.236812, -0.108483), 
    viewOffsetX=-0.182646, viewOffsetY=0.157862)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.17391, 
    farPlane=1.98117, width=0.568783, height=0.27268, viewOffsetX=-0.0960666, 
    viewOffsetY=0.0876578)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.21695, 
    farPlane=1.70944, width=0.589636, height=0.282677, cameraPosition=(
    0.332993, -0.616534, 1.17577), cameraUpVector=(0.707376, 0.621385, 
    0.336898), cameraTarget=(0.188719, 0.220957, -0.0659903), 
    viewOffsetX=-0.0995885, viewOffsetY=0.0908715)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.21404, 
    farPlane=1.71233, width=0.588228, height=0.282002, cameraPosition=(
    0.427886, -0.581639, 1.18828), cameraUpVector=(0.149827, 0.827689, 
    0.540816), cameraTarget=(0.283612, 0.255852, -0.0534813), 
    viewOffsetX=-0.0993506, viewOffsetY=0.0906545)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.34506, 
    farPlane=1.68026, width=0.651711, height=0.312436, cameraPosition=(
    0.105738, -0.11314, 1.46036), cameraUpVector=(0.199147, 0.951247, 
    0.235521), cameraTarget=(0.285809, 0.210271, 0.00188603), 
    viewOffsetX=-0.110073, viewOffsetY=0.100438)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF, loads=ON, 
    bcs=ON, predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.26818, 
    farPlane=1.75713, width=1.20574, height=0.54692, viewOffsetX=-0.0106336, 
    viewOffsetY=0.00485924)
del mdb.models['Model-1'].boundaryConditions['BC-1']
a = mdb.models['Model-1'].rootAssembly
e1 = a.instances['Beam1-1'].edges
edges1 = e1.getSequenceFromMask(mask=(
    '[#18060614 #1a900288 #5400 #a800040 #408220 #e022 ]', ), )
a.Set(edges=edges1, name='Set-2')
#: The set 'Set-2' has been edited (32 edges).
del mdb.models['Model-1'].rootAssembly.sets['Set-2']
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Step-1')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF, adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Initial')
a = mdb.models['Model-1'].rootAssembly
v1 = a.instances['Beam1-1'].vertices
verts1 = v1.getSequenceFromMask(mask=('[#400000 #0 #1100 #4000 ]', ), )
a.Set(vertices=verts1, name='Set-1')
#: The set 'Set-1' has been edited (4 vertices).
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.2762, 
    farPlane=1.74912, width=1.14523, height=0.51947, viewOffsetX=0.0321511, 
    viewOffsetY=0.0204746)
a = mdb.models['Model-1'].rootAssembly
e1 = a.instances['Beam1-1'].edges
edges1 = e1.getSequenceFromMask(mask=(
    '[#1806061c #1000c280 #30c0008 #164100 #c0000c0 #30003000 #86018c00', 
    ' #10 ]', ), )
a.Set(edges=edges1, name='Set-2')
#: The set 'Set-2' has been created (40 edges).
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON, adaptiveMeshConstraints=OFF)
a = mdb.models['Model-1'].rootAssembly
region = a.sets['Set-2']
mdb.models['Model-1'].EncastreBC(name='BC-1', createStepName='Initial', 
    region=region, localCsys=None)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Step-1')
#: Warning: Cannot continue yet--complete the step or cancel the procedure.
a = mdb.models['Model-1'].rootAssembly
v1 = a.instances['Beam1-1'].vertices
verts1 = v1.getSequenceFromMask(mask=('[#0:2 #400 ]', ), )
region = regionToolset.Region(vertices=verts1)
mdb.models['Model-1'].loads['Load-1'].setValues(region=region, 
    distributionType=UNIFORM, field='')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON, loads=OFF, 
    bcs=OFF, predefinedFields=OFF, connectors=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
mdb.jobs['Job-1'].kill()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, interactions=ON, constraints=ON, 
    engineeringFeatures=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON, 
    interactions=OFF, constraints=OFF, connectors=OFF, engineeringFeatures=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
p = mdb.models['Model-1'].parts['Beam1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.34327, 
    farPlane=1.55304, width=0.710285, height=0.323371, viewOffsetX=-0.100688, 
    viewOffsetY=0.0798935)
p = mdb.models['Model-1'].parts['Beam2']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF, 
    interactions=ON, constraints=ON, connectors=ON, engineeringFeatures=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
mdb.models['Model-1'].constraints['Constraint-1'].setValues(
    positionTolerance=0.005)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=OFF, 
    constraints=OFF, connectors=OFF, engineeringFeatures=OFF)
mdb.jobs['Job-1'].kill()
#: Error in job Job-1: Process terminated by external request (SIGTERM or SIGINT received).
#: Job Job-1: Abaqus/Standard was terminated prior to analysis completion.
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     2
#: Number of Meshes:             2
#: Number of Element Sets:       4
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.0644, 
    farPlane=1.9087, width=0.860608, height=0.368152, viewOffsetX=0.014241, 
    viewOffsetY=0.00136898)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
#: Error in job Job-1: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
session.viewports['Viewport: 1'].view.setValues(width=1.35327, height=0.578905, 
    viewOffsetX=0.113738, viewOffsetY=0.0166488)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     2
#: Number of Meshes:             2
#: Number of Element Sets:       4
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.11026, 
    farPlane=1.86284, width=0.547201, height=0.234082, viewOffsetX=-0.0438573, 
    viewOffsetY=0.0540868)
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'))
session.viewports['Viewport: 1'].view.setValues(width=0.670029, 
    height=0.286626, viewOffsetX=-0.00645714, viewOffsetY=0.0412972)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.05149, 
    farPlane=1.92162, width=1.09591, height=0.468811, viewOffsetX=0.00376683, 
    viewOffsetY=0.0608613)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
del mdb.models['Model-1'].steps['Step-1']
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Initial')
mdb.models['Model-1'].FrequencyStep(name='Step-1', previous='Initial', 
    numEigen=20)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Step-1')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['Job-1'].kill()
#: Error in job Job-1: Process terminated by external request (SIGTERM or SIGINT received).
#: Job Job-1: Abaqus/Standard was terminated prior to analysis completion.
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: Abaqus Error: Detected lock file Job-1.lck. Please confirm that no other applications are attempting to write to the output database associated with this job before removing the lock file and resubmitting.
#: Abaqus/Analysis exited with error(s).
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-1.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
#* 
#: Error in job Job-1: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
#: Job Job-1 aborted due to errors.
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON, adaptiveMeshConstraints=OFF)
#: Job Job-1: Analysis Input File Processor completed successfully.
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.25858, 
    farPlane=1.76674, width=1.2782, height=0.579786, viewOffsetX=0.0699589, 
    viewOffsetY=0.000101328)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     2
#: Number of Meshes:             2
#: Number of Element Sets:       4
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
#: Job Job-1: Abaqus/Standard completed successfully.
#: Job Job-1 completed successfully. 
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON, adaptiveMeshConstraints=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
#: Job Job-1: Abaqus/Standard completed successfully.
#: Job Job-1 completed successfully. 
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.25149, 
    farPlane=1.77382, width=1.19474, height=0.572771, viewOffsetX=0.0492276, 
    viewOffsetY=0.00288746)
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     2
#: Number of Meshes:             2
#: Number of Element Sets:       4
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=6)
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=13)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.14152, 
    farPlane=1.83183, width=0.135565, height=0.057992, viewOffsetX=-0.133678, 
    viewOffsetY=0.203206)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a1 = mdb.models['Model-1'].rootAssembly
p = mdb.models['Model-1'].parts['Beam3']
a1.Instance(name='Beam3-1', part=p, dependent=ON)
a1 = mdb.models['Model-1'].rootAssembly
a1.translate(instanceList=('Beam3-1', ), vector=(0.0256, 0.486, -0.0003))
#: The instance Beam3-1 was translated by 25.6E-03, 486.E-03, -300.E-06 with respect to the assembly coordinate system
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.37113, 
    farPlane=1.75338, width=0.714183, height=0.32395, viewOffsetX=-0.123139, 
    viewOffsetY=0.0668536)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.28321, 
    farPlane=2.11222, width=0.668387, height=0.303177, cameraPosition=(
    -1.20322, 0.914158, -0.598733), cameraUpVector=(0.208641, 0.848375, 
    0.486549), cameraTarget=(0.0269407, 0.228486, 0.0693351), 
    viewOffsetX=-0.115242, viewOffsetY=0.0625667)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.37507, 
    farPlane=2.02037, width=0.0532631, height=0.0241599, viewOffsetX=-0.118681, 
    viewOffsetY=0.184042)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.39447, 
    farPlane=2.11789, width=0.0540145, height=0.0245007, cameraPosition=(
    -1.24365, 1.16814, -0.160756), cameraUpVector=(0.315607, 0.603339, 
    0.732376), cameraTarget=(0.0114867, 0.266192, 0.0414012), 
    viewOffsetX=-0.120355, viewOffsetY=0.186639)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.34128, 
    farPlane=2.17108, width=0.462392, height=0.209739, viewOffsetX=-0.143026, 
    viewOffsetY=0.117728)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.43141, 
    farPlane=2.08676, width=0.493463, height=0.223833, cameraPosition=(
    -1.21607, 0.516229, 0.935742), cameraUpVector=(0.578573, 0.195283, 
    0.791908), cameraTarget=(0.051297, 0.18091, 0.0924876), 
    viewOffsetX=-0.152636, viewOffsetY=0.125639)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.35619, 
    farPlane=2.16196, width=1.05365, height=0.477931, viewOffsetX=-0.0670445, 
    viewOffsetY=0.0768919)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=ON, 
    constraints=ON, connectors=ON, engineeringFeatures=ON)
a = mdb.models['Model-1'].rootAssembly
region1=a.instances['Beam1-1'].surfaces['inside']
a = mdb.models['Model-1'].rootAssembly
region2=a.instances['Beam3-1'].surfaces['outside']
mdb.models['Model-1'].Tie(name='Constraint-2', main=region1, secondary=region2, 
    positionToleranceMethod=COMPUTED, adjust=ON, tieRotations=ON, thickness=ON)
mdb.models['Model-1'].constraints['Constraint-2'].setValues(
    positionToleranceMethod=SPECIFIED, positionTolerance=0.005)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON, 
    interactions=OFF, constraints=OFF, connectors=OFF, engineeringFeatures=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
p = mdb.models['Model-1'].parts['Beam2']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['Beam3']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['Beam3']
p.seedPart(size=0.005, deviationFactor=0.1, minSizeFactor=0.1)
p = mdb.models['Model-1'].parts['Beam3']
p.generateMesh()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a1 = mdb.models['Model-1'].rootAssembly
a1.regenerate()
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.28399, 
    farPlane=2.16079, width=0.997559, height=0.454158, cameraPosition=(
    -1.34817, 0.525914, -0.584105), cameraUpVector=(-0.0418771, 0.778386, 
    0.626388), cameraTarget=(0.0635632, 0.15936, -0.0342191), 
    viewOffsetX=-0.0634753, viewOffsetY=0.0727985)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.37844, 
    farPlane=2.12486, width=1.07094, height=0.487565, cameraPosition=(
    -0.775838, -0.42692, 1.24644), cameraUpVector=(0.540803, 0.522099, 
    0.659503), cameraTarget=(0.145089, 0.0754941, 0.0935338), 
    viewOffsetX=-0.0681444, viewOffsetY=0.0781533)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
#: Job Job-1: Abaqus/Standard completed successfully.
#: Job Job-1 completed successfully. 
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=8)
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=20)
session.viewports['Viewport: 1'].view.setValues(nearPlane=0.957305, 
    farPlane=2.01711, width=1.55418, height=0.664848, viewOffsetX=-0.0630278, 
    viewOffsetY=0.0485118)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
del mdb.models['Model-1'].steps['Step-1']
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Initial')
mdb.models['Model-1'].ImplicitDynamicsStep(name='Step-1', previous='Initial', 
    timePeriod=0.05, maxNumInc=100000, timeIncrementationMethod=FIXED, 
    initialInc=1e-06, nohaf=OFF, noStop=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Step-1')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON, adaptiveMeshConstraints=OFF)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.36924, 
    farPlane=2.13404, width=1.06772, height=0.484312, cameraPosition=(
    -0.680175, -0.390976, 1.33852), cameraUpVector=(-0.287038, 0.940728, 
    0.180664), cameraTarget=(0.240752, 0.111438, 0.185612), 
    viewOffsetX=-0.0676898, viewOffsetY=0.0776319)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.54796, 
    farPlane=1.96352, width=1.20708, height=0.547525, cameraPosition=(0.267019, 
    -0.174519, 1.70728), cameraUpVector=(0.0588155, 0.979954, 0.190344), 
    cameraTarget=(0.333239, 0.118602, 0.17776), viewOffsetX=-0.0765248, 
    viewOffsetY=0.0877646)
a = mdb.models['Model-1'].rootAssembly
v1 = a.instances['Beam1-1'].vertices
verts1 = v1.getSequenceFromMask(mask=('[#0:2 #400 ]', ), )
region = regionToolset.Region(vertices=verts1)
mdb.models['Model-1'].ConcentratedForce(name='Load-1', createStepName='Step-1', 
    region=region, cf3=0.0001, amplitude='sin (w t)', distributionType=UNIFORM, 
    field='', localCsys=None)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF, loads=ON, 
    bcs=ON, predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF, adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=ON, 
    engineeringFeatures=ON, mesh=OFF)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=OFF)
p = mdb.models['Model-1'].parts['Beam3']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
#: Job Job-1: Analysis Input File Processor completed successfully.
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=OFF, 
    engineeringFeatures=OFF)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
#* There is no valid step data available on the database. If the analysis is 
#* running, the database must be closed and reopened once the results have been 
#* initialized. The requested operation has been cancelled.
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
#* rom_Transporter::GetClassBagForRead - Table for class "res_Frame" is missing 
#* from the database: 
#* D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus 
#* models/Base vibration model/Job-1.odb. The database is corrupt.
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
#* rom_Transporter::GetClassBagForRead - Table for class "res_Frame" is missing 
#* from the database: 
#* D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus 
#* models/Base vibration model/Job-1.odb. The database is corrupt.
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['Job-1'].kill()
#: Error in job Job-1: Process terminated by external request (SIGTERM or SIGINT received).
#: Job Job-1: Abaqus/Standard was terminated prior to analysis completion.
#: Error in job Job-1: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['Job-1'].kill()
#: Error in job Job-1: Process terminated by external request (SIGTERM or SIGINT received).
#: Job Job-1: Abaqus/Standard was terminated prior to analysis completion.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
#: Error in job Job-1: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
mdb.models['Model-1'].amplitudes['sin (w t)'].setValues(timeSpan=STEP, 
    frequency=10000.0, start=0.0, a_0=0.0, data=((0.0, 1.0), ))
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.animationOptions.setValues(frameRate=99)
session.viewports['Viewport: 1'].view.setValues(nearPlane=0.904187, 
    farPlane=2.06905, width=1.96597, height=0.841003, viewOffsetX=0.0307375, 
    viewOffsetY=-0.0812666)
session.viewports['Viewport: 1'].view.setValues(nearPlane=0.986471, 
    farPlane=2.14533, width=2.14487, height=0.917537, cameraPosition=(1.78794, 
    0.582282, 0.0034954), cameraUpVector=(-0.515495, 0.84175, -0.160378), 
    cameraTarget=(0.331714, 0.284581, 0.0318644), viewOffsetX=0.0335347, 
    viewOffsetY=-0.0886621)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.16615, 
    farPlane=1.96565, width=0.663783, height=0.283954, viewOffsetX=-0.0152026, 
    viewOffsetY=-0.11303)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.1944, 
    farPlane=1.96671, width=0.679864, height=0.290833, cameraPosition=(1.79834, 
    0.533959, 0.207826), cameraUpVector=(-0.46428, 0.860396, -0.210151), 
    cameraTarget=(0.342434, 0.28363, 0.0414208), viewOffsetX=-0.0155709, 
    viewOffsetY=-0.115768)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.1972, 
    farPlane=1.9639, width=0.602135, height=0.257582, viewOffsetX=0.0127762, 
    viewOffsetY=-0.0523114)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=1e-05)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['Job-1'].kill()
#: Error in job Job-1: Process terminated by external request (SIGTERM or SIGINT received).
#: Job Job-1: Abaqus/Standard was terminated prior to analysis completion.
mdb.save()
#: The model database has been saved to "D:\Delamination-detection-in-composite-laminates-using-deep-learning\Abacus models\Base vibration model\model num 1.cae".
mdb.save()
#: The model database has been saved to "D:\Delamination-detection-in-composite-laminates-using-deep-learning\Abacus models\Base vibration model\model num 1.cae".
#: Error in job Job-1: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['Job-1'].kill()
#: Error in job Job-1: Process terminated by external request (SIGTERM or SIGINT received).
#: Job Job-1: Abaqus/Standard was terminated prior to analysis completion.
mdb.jobs['Job-1'].setValues(numThreadsPerMpiProcess=1, numCpus=2, numDomains=2, 
    numGPUs=2)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
#: Error in job Job-1: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
#: Job Job-1 aborted due to errors.
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
#: ERROR in job messaging system: Error in connection to analysis
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.02939, 
    farPlane=1.94385, width=1.22651, height=0.524677, viewOffsetX=0.00691739, 
    viewOffsetY=0.0567117)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.04063, 
    farPlane=1.90205, width=1.2399, height=0.530406, cameraPosition=(1.72661, 
    0.277884, 0.0597689), cameraUpVector=(-0.354534, 0.934139, -0.0411134), 
    cameraTarget=(0.243931, 0.241162, -0.0419956), viewOffsetX=0.00699292, 
    viewOffsetY=0.0573309)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.07423, 
    farPlane=1.87495, width=1.27994, height=0.547533, cameraPosition=(0.664387, 
    1.17354, 1.07981), cameraUpVector=(-0.341986, 0.529737, -0.77616), 
    cameraTarget=(0.266445, 0.249056, -0.0142732), viewOffsetX=0.00721873, 
    viewOffsetY=0.0591822)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.08003, 
    farPlane=1.82762, width=1.28685, height=0.55049, cameraPosition=(0.820494, 
    0.817219, 1.2167), cameraUpVector=(-0.333658, 0.737587, -0.587059), 
    cameraTarget=(0.261567, 0.240511, -0.0343204), viewOffsetX=0.00725771, 
    viewOffsetY=0.0595018)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.20377, 
    farPlane=1.70388, width=0.367663, height=0.157279, viewOffsetX=-0.154641, 
    viewOffsetY=0.200536)
session.animationOptions.setValues(frameRate=42)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.0384, 
    farPlane=1.86925, width=1.66249, height=0.711183, viewOffsetX=-0.0181886, 
    viewOffsetY=0.00295866)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['Job-1'].kill()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
mdb.models['Model-1'].steps['Step-1'].setValues(timePeriod=0.01, 
    initialInc=5e-06)
#: Error in job Job-1: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
#: Job Job-1 aborted due to errors.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'))
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.05233, 
    farPlane=1.85531, width=1.40509, height=0.601073, viewOffsetX=-0.135509, 
    viewOffsetY=0.105947)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.53871, 
    farPlane=1.97277, width=1.19987, height=0.544255, viewOffsetX=-0.065698, 
    viewOffsetY=0.0709848)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON, loads=OFF, 
    bcs=OFF, predefinedFields=OFF, connectors=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.65568, 
    farPlane=1.8558, width=0.274884, height=0.125146, viewOffsetX=-0.271697, 
    viewOffsetY=0.262246)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF, 
    interactions=ON, constraints=ON, connectors=ON, engineeringFeatures=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
#: Warning: Cannot continue yet--complete the step or cancel the procedure.
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.65047, 
    farPlane=1.86102, width=0.31126, height=0.141186, viewOffsetX=-0.254936, 
    viewOffsetY=0.249242)
a = mdb.models['Model-1'].rootAssembly
region1=a.instances['Beam2-1'].surfaces['bottom']
a = mdb.models['Model-1'].rootAssembly
region2=a.instances['Beam3-1'].surfaces['top']
mdb.models['Model-1'].SurfaceToSurfaceContactStd(name='Int-1', 
    createStepName='Step-1', main=region1, secondary=region2, sliding=FINITE, 
    thickness=ON, interactionProperty='IntProp-1', adjustMethod=NONE, 
    initialClearance=OMIT, datumAxis=None, clearanceRegion=None)
#: The interaction "Int-1" has been created.
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.62318, 
    farPlane=2.23346, width=0.306114, height=0.138852, cameraPosition=(
    -1.68004, 0.126527, 0.13119), cameraUpVector=(0.0114708, 0.92643, 
    0.376291), cameraTarget=(-0.122253, 0.0903488, 0.172786), 
    viewOffsetX=-0.250721, viewOffsetY=0.245121)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.6578, 
    farPlane=2.19885, width=0.0590573, height=0.0267882, viewOffsetX=-0.302402, 
    viewOffsetY=0.294861)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.675, 
    farPlane=2.21352, width=0.05967, height=0.0270661, cameraPosition=(
    -1.66356, 0.212924, -0.398005), cameraUpVector=(-0.0486278, 0.929509, 
    0.36558), cameraTarget=(-0.177797, 0.109733, 0.0620073), 
    viewOffsetX=-0.305539, viewOffsetY=0.29792)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.64913, 
    farPlane=2.23939, width=0.260437, height=0.118133, viewOffsetX=-0.267173, 
    viewOffsetY=0.284972)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.64377, 
    farPlane=2.26705, width=0.259589, height=0.117749, cameraPosition=(
    -1.70216, 0.289203, -0.232951), cameraUpVector=(0.0184653, 0.928835, 
    0.370034), cameraTarget=(-0.187817, 0.12687, 0.09897), 
    viewOffsetX=-0.266303, viewOffsetY=0.284045)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.67648, 
    farPlane=2.23435, width=0.0237046, height=0.0107523, viewOffsetX=-0.263823, 
    viewOffsetY=0.304213)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.67633, 
    farPlane=2.24577, width=0.0237025, height=0.0107514, cameraPosition=(
    -1.71805, 0.314162, -0.106905), cameraUpVector=(0.0532503, 0.924577, 
    0.377255), cameraTarget=(-0.187486, 0.131431, 0.124901), 
    viewOffsetX=-0.2638, viewOffsetY=0.304186)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.66668, 
    farPlane=2.25542, width=0.0990073, height=0.0449093, viewOffsetX=-0.268054, 
    viewOffsetY=0.300944)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.6707, 
    farPlane=2.25491, width=0.0992462, height=0.0450177, cameraPosition=(
    -1.68687, 0.267288, 0.377226), cameraUpVector=(0.128731, 0.911737, 
    0.390082), cameraTarget=(-0.143331, 0.116236, 0.220908), 
    viewOffsetX=-0.268701, viewOffsetY=0.30167)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.66551, 
    farPlane=2.26011, width=0.128283, height=0.0581888, viewOffsetX=-0.334323, 
    viewOffsetY=0.262685)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.68781, 
    farPlane=2.31085, width=0.130001, height=0.0589678, cameraPosition=(
    -1.74769, 0.441743, -0.129347), cameraUpVector=(0.106119, 0.923599, 
    0.368379), cameraTarget=(-0.233956, 0.167554, 0.122054), 
    viewOffsetX=-0.338799, viewOffsetY=0.266202)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.6824, 
    farPlane=2.31626, width=0.157295, height=0.0713483, viewOffsetX=-0.270364, 
    viewOffsetY=0.277337)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.70045, 
    farPlane=2.25512, width=0.158983, height=0.072114, cameraPosition=(
    -1.61315, 0.278491, -0.692179), cameraUpVector=(-0.0755385, 0.924947, 
    0.372514), cameraTarget=(-0.212314, 0.124614, -0.0260271), 
    viewOffsetX=-0.273266, viewOffsetY=0.280314)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.7011, 
    farPlane=2.25449, width=0.162323, height=0.0736292, viewOffsetX=-0.201823, 
    viewOffsetY=0.321426)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.66705, 
    farPlane=2.25567, width=0.159075, height=0.0721556, cameraPosition=(
    -1.65355, -0.0362041, -0.377297), cameraUpVector=(-0.168858, 0.551298, 
    0.817042), cameraTarget=(-0.117542, 0.0822224, -0.139752), 
    viewOffsetX=-0.197784, viewOffsetY=0.314993)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.73304, 
    farPlane=2.17072, width=0.165372, height=0.0750119, cameraPosition=(
    -0.436597, -0.675484, 1.57777), cameraUpVector=(0.368979, 0.765946, 
    0.52648), cameraTarget=(0.135798, -0.0516104, 0.268989), 
    viewOffsetX=-0.205613, viewOffsetY=0.327462)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.63707, 
    farPlane=2.26668, width=0.900004, height=0.408238, viewOffsetX=-0.245048, 
    viewOffsetY=0.19948)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.68393, 
    farPlane=2.20202, width=0.925768, height=0.419924, cameraPosition=(
    -0.0913703, -0.533352, 1.74855), cameraUpVector=(0.396155, 0.835926, 
    0.379854), cameraTarget=(0.210366, -0.0214941, 0.307468), 
    viewOffsetX=-0.252063, viewOffsetY=0.20519)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=OFF, 
    constraints=OFF, connectors=OFF, engineeringFeatures=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
regionDef=mdb.models['Model-1'].rootAssembly.sets['Set-2']
mdb.models['Model-1'].historyOutputRequests['H-Output-1'].setValues(variables=(
    'U1', 'U2', 'U3', 'UR1', 'UR2', 'UR3', 'V1', 'V2', 'V3', 'VR1', 'VR2', 
    'VR3', 'A1', 'A2', 'A3', 'AR1', 'AR2', 'AR3'), region=regionDef, 
    sectionPoints=DEFAULT, rebar=EXCLUDE)
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'U', ))
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['Job-1'].kill()
#: Error in job Job-1: Process terminated by external request (SIGTERM or SIGINT received).
#: Job Job-1: Abaqus/Standard was terminated prior to analysis completion.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
#: Error in job Job-1: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
mdb.models['Model-1'].steps['Step-1'].setValues(timePeriod=0.05, 
    initialInc=1e-06)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=ON, 
    constraints=ON, connectors=ON, engineeringFeatures=ON, 
    adaptiveMeshConstraints=OFF)
del mdb.models['Model-1'].interactions['Int-1']
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=OFF, 
    constraints=OFF, connectors=OFF, engineeringFeatures=OFF, 
    adaptiveMeshConstraints=ON)
mdb.models['Model-1'].steps['Step-1'].setValues(timePeriod=0.01, 
    initialInc=5e-06)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.68062, 
    farPlane=2.20533, width=0.92395, height=0.4191, cameraPosition=(0.0513806, 
    -0.418348, 1.81929), cameraUpVector=(-0.112057, 0.943559, 0.311674), 
    cameraTarget=(0.353117, 0.0935103, 0.378206), viewOffsetX=-0.251568, 
    viewOffsetY=0.204787)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.69548, 
    farPlane=2.4661, width=0.93212, height=0.422806, cameraPosition=(-1.82518, 
    0.101119, 0.215622), cameraUpVector=(-0.00442651, 0.93767, 0.347498), 
    cameraTarget=(-0.266429, 0.106169, 0.221876), viewOffsetX=-0.253792, 
    viewOffsetY=0.206598)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.80712, 
    farPlane=2.35446, width=0.113931, height=0.0516785, viewOffsetX=-0.323838, 
    viewOffsetY=0.269131)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    renderBeamProfiles=ON, renderShellThickness=ON)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.80384, 
    farPlane=2.34832, width=0.113724, height=0.0515848, cameraPosition=(
    -1.77255, 0.0628274, 0.468449), cameraUpVector=(0.0515341, 0.89815, 
    0.436658), cameraTarget=(-0.229126, 0.0800273, 0.250937), 
    viewOffsetX=-0.323251, viewOffsetY=0.268643)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.80664, 
    farPlane=2.34552, width=0.0998183, height=0.0452771, viewOffsetX=-0.341635, 
    viewOffsetY=0.267268)
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.07762, 
    farPlane=1.89562, width=0.769989, height=0.329387, viewOffsetX=-0.0159527, 
    viewOffsetY=-0.00071205)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
#: ERROR in job messaging system: Error in connection to analysis
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.04793, 
    farPlane=1.92531, width=1.08539, height=0.464309, viewOffsetX=0.0305393, 
    viewOffsetY=0.0185426)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.76955, 
    farPlane=2.38261, width=0.382967, height=0.183598, viewOffsetX=-0.317419, 
    viewOffsetY=0.233707)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
#: Error in job Job-1: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
#: Job Job-1 aborted due to errors.
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.06287, 
    farPlane=1.91037, width=0.972719, height=0.416111, viewOffsetX=0.026587, 
    viewOffsetY=0.0499261)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U3 PI: BEAM1-1 Node 321 in NSET SET-2', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.XYPlot('XYPlot-1')
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
session.xyPlots[session.viewports['Viewport: 1'].displayedObject.name].setValues(
    transform=(1234.51, 0, 0, 0.459154, 0, 1234.51, 0, -9.36325e-05, 0, 0, 
    1234.51, 0, 0, 0, 0, 1))
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U3 PI: BEAM1-1 Node 261 in NSET SET-2', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial velocity: V3 PI: BEAM1-1 Node 1156 in NSET SET-2', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational acceleration: AR1 PI: BEAM1-1 Node 9 in NSET SET-2', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational acceleration: AR1 PI: BEAM1-1 Node 19 in NSET SET-2', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational velocity: VR3 PI: BEAM1-1 Node 44 in NSET SET-2', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
session.xyPlots[session.viewports['Viewport: 1'].displayedObject.name].setValues(
    transform=(7.7156e+06, 0, 0, 0.459543, 0, 2.20229e+07, 0, 2.67103e-09, 0, 
    0, 7.7156e+06, 0, 0, 0, 0, 1))
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational velocity: VR3 PI: BEAM1-1 Node 107 in NSET SET-2', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
session.xyPlots[session.viewports['Viewport: 1'].displayedObject.name].setValues(
    transform=(363159, 0, 0, 0.459543, 0, 1.03658e+06, 0, -5.96187e-08, 0, 0, 
    363159, 0, 0, 0, 0, 1))
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF, 
    adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
regionDef=mdb.models['Model-1'].rootAssembly.sets['Set-1']
mdb.models['Model-1'].historyOutputRequests['H-Output-1'].setValues(
    region=regionDef)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
mdb.jobs['Job-1'].kill()
#: Error in job Job-1: Process terminated by external request (SIGTERM or SIGINT received).
#: Job Job-1: Analysis Input File Processor was terminated prior to analysis completion.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
#: Error in job Job-1: Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.
mdb.models['Model-1'].steps['Step-1'].setValues(timePeriod=0.005, 
    initialInc=5e-06)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.65919, 
    farPlane=2.49296, width=1.09102, height=0.494883, viewOffsetX=-0.0673454, 
    viewOffsetY=0.0762037)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U3 PI: BEAM1-1 Node 23 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.04694, 
    farPlane=1.92629, width=0.980189, height=0.419306, viewOffsetX=0.0249937, 
    viewOffsetY=0.00155413)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational acceleration: AR3 PI: BEAM1-1 Node 73 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational displacement: UR1 PI: BEAM1-1 Node 111 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational displacement: UR2 PI: BEAM1-1 Node 23 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational displacement: UR3 PI: BEAM1-1 Node 23 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
#: Job Job-1: Abaqus/Standard completed successfully.
#: Job Job-1 completed successfully. 
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U3 PI: BEAM1-1 Node 73 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
mdb.models['Model-1'].steps['Step-1'].setValues(timePeriod=0.01)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
#: Job Job-1: Analysis Input File Processor completed successfully.
mdb.jobs['Job-1'].kill()
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
#: Warning: The output database 'D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb' disk file has changed.
#: 
#: The current plot operation has been canceled, re-open the file to view the results
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
#* There is no valid step data available on the database. If the analysis is 
#* running, the database must be closed and reopened once the results have been 
#* initialized. The requested operation has been cancelled.
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
#: ERROR in job messaging system: Error in connection to analysis
#: Error in job Job-1: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
#: Job Job-1 aborted due to errors.
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#: The job input file "Job-1.inp" has been submitted for analysis.
#: Job Job-1: Analysis Input File Processor completed successfully.
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
#: Model: D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     3
#: Number of Meshes:             3
#: Number of Element Sets:       5
#: Number of Node Sets:          4
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational acceleration: AR1 PI: BEAM1-1 Node 23 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational acceleration: AR1 PI: BEAM1-1 Node 73 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational acceleration: AR1 PI: BEAM1-1 Node 73 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational acceleration: AR1 PI: BEAM1-1 Node 23 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Rotational acceleration: AR1 PI: BEAM1-1 Node 73 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial acceleration: A1 PI: BEAM1-1 Node 111 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial acceleration: A2 PI: BEAM1-1 Node 77 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial acceleration: A3 PI: BEAM1-1 Node 111 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U1 PI: BEAM1-1 Node 77 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U2 PI: BEAM1-1 Node 73 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U3 PI: BEAM1-1 Node 77 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
#: Job Job-1: Abaqus/Standard completed successfully.
#: Job Job-1 completed successfully. 
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb'])
o3 = session.openOdb(
    name='D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.01289, 
    farPlane=1.96035, width=1.04909, height=0.448783, viewOffsetX=-0.00400058, 
    viewOffsetY=0.00580322)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.17373, 
    farPlane=1.79951, width=0.115792, height=0.0495338, viewOffsetX=-0.128375, 
    viewOffsetY=0.215427)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.17473, 
    farPlane=1.79851, width=0.115891, height=0.0495759, cameraPosition=(1.005, 
    1.07931, 1.00258), cameraUpVector=(-0.0966243, 0.421118, -0.901844), 
    cameraTarget=(0.146702, 0.221015, 0.144283), viewOffsetX=-0.128484, 
    viewOffsetY=0.21561)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.20024, 
    farPlane=1.93208, width=0.118407, height=0.0506524, cameraPosition=(
    0.942448, 1.635, 0.396094), cameraUpVector=(-0.160251, -0.186364, 
    -0.969324), cameraTarget=(0.179056, 0.367211, 0.254825), 
    viewOffsetX=-0.131274, viewOffsetY=0.220292)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.19261, 
    farPlane=1.93971, width=0.181432, height=0.077613, viewOffsetX=-0.132059, 
    viewOffsetY=0.217851)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.1122, 
    farPlane=1.87623, width=0.169199, height=0.0723804, cameraPosition=(
    1.25238, 1.40647, -0.00408889), cameraUpVector=(-0.317198, -0.374139, 
    -0.871439), cameraTarget=(0.194564, 0.392703, 0.247548), 
    viewOffsetX=-0.123155, viewOffsetY=0.203164)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.11999, 
    farPlane=1.86844, width=0.118024, height=0.0504885, viewOffsetX=-0.134984, 
    viewOffsetY=0.18947)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.15782, 
    farPlane=1.8908, width=0.122011, height=0.0521941, cameraPosition=(1.07863, 
    1.42592, 0.585398), cameraUpVector=(-0.0959436, -0.0479534, -0.994231), 
    cameraTarget=(0.156808, 0.315245, 0.229508), viewOffsetX=-0.139544, 
    viewOffsetY=0.19587)
session.viewports['Viewport: 1'].view.setValues(nearPlane=1.09136, 
    farPlane=1.57784, width=0.115008, height=0.0491982, cameraPosition=(1.388, 
    0.311164, -0.752343), cameraUpVector=(-0.75935, -0.590272, -0.2738), 
    cameraTarget=(0.254842, 0.490887, 0.193), viewOffsetX=-0.131534, 
    viewOffsetY=0.184627)
session.viewports['Viewport: 1'].view.setValues(nearPlane=0.949179, 
    farPlane=1.72003, width=1.08564, height=0.464415, viewOffsetX=0.211195, 
    viewOffsetY=0.191372)
session.viewports['Viewport: 1'].view.setValues(nearPlane=0.785282, 
    farPlane=1.70287, width=0.898177, height=0.384223, cameraPosition=(1.46845, 
    0.823163, -0.180377), cameraUpVector=(-0.879433, 0.226624, -0.418617), 
    cameraTarget=(0.377346, 0.127525, 0.551468), viewOffsetX=0.174727, 
    viewOffsetY=0.158327)
session.viewports['Viewport: 1'].view.setValues(nearPlane=0.731257, 
    farPlane=1.3739, width=0.836385, height=0.35779, cameraPosition=(-0.288205, 
    0.404625, -0.950977), cameraUpVector=(-0.389564, 0.141559, 0.910055), 
    cameraTarget=(0.794743, 0.348114, 0.0659039), viewOffsetX=0.162706, 
    viewOffsetY=0.147435)
session.viewports['Viewport: 1'].view.setValues(nearPlane=0.690063, 
    farPlane=1.41509, width=1.14409, height=0.489418, viewOffsetX=0.218888, 
    viewOffsetY=0.193968)
session.viewports['Viewport: 1'].view.setValues(nearPlane=0.774709, 
    farPlane=1.56674, width=1.28442, height=0.549452, cameraPosition=(0.318004, 
    -0.49906, -0.965467), cameraUpVector=(-0.850487, 0.415843, 0.322095), 
    cameraTarget=(0.630419, 0.56321, 0.0264992), viewOffsetX=0.245738, 
    viewOffsetY=0.21776)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U3 PI: BEAM1-1 Node 77 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U3 PI: BEAM1-1 Node 111 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U3 PI: BEAM1-1 Node 73 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
xy1 = xyPlot.XYDataFromHistory(odb=odb, 
    outputVariableName='Spatial displacement: U3 PI: BEAM1-1 Node 23 in NSET SET-1', 
    steps=('Step-1', ), suppressQuery=True, __linkedVpName__='Viewport: 1')
c1 = session.Curve(xyData=xy1)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/Delamination-detection-in-composite-laminates-using-deep-learning/Abacus models/Base vibration model/Job-1.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=0.792496, 
    farPlane=1.54896, width=0.964286, height=0.412504, viewOffsetX=0.216032, 
    viewOffsetY=0.211156)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.Job(name='Job-2', model='Model-1', description='', type=ANALYSIS, 
    atTime=None, waitMinutes=0, waitHours=0, queue=None, memory=90, 
    memoryUnits=PERCENTAGE, getMemoryFromAnalysis=True, 
    explicitPrecision=SINGLE, nodalOutputPrecision=SINGLE, echoPrint=OFF, 
    modelPrint=OFF, contactPrint=OFF, historyPrint=OFF, userSubroutine='', 
    scratch='', resultsFormat=ODB, numThreadsPerMpiProcess=1, 
    multiprocessingMode=DEFAULT, numCpus=1, numGPUs=2)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#: The job input file "Job-2.inp" has been submitted for analysis.
#: Job Job-2: Analysis Input File Processor completed successfully.
mdb.jobs['Job-2'].kill()
#: Error in job Job-2: Process terminated by external request (SIGTERM or SIGINT received).
#: Job Job-2: Abaqus/Standard was terminated prior to analysis completion.
#: Error in job Job-2: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
mdb.save()
#: The model database has been saved to "D:\Delamination-detection-in-composite-laminates-using-deep-learning\Abacus models\Base vibration model\model num 1.cae".
