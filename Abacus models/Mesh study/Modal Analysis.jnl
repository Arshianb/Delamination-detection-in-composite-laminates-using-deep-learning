from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Delamination-Case-1'].rootAssembly.regenerate()
mdb.Model(name='Delamination-forModalAnalysis-Case-1', objectToCopy=
    mdb.models['Delamination-Case-1'])
mdb.models['Delamination-forModalAnalysis-Case-1'].parts['Beam1'].seedEdgeBySize(
    deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-1'].parts['Beam1'].edges.getSequenceFromMask(
    ('[#ffffffff:7 #f ]', ), ), minSizeFactor=0.1, size=0.04)
mdb.models['Delamination-forModalAnalysis-Case-1'].parts['Beam1'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-1'].parts['Beam2'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-1'].parts['Beam2'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.04)
mdb.models['Delamination-forModalAnalysis-Case-1'].parts['Beam2'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-1'].parts['Beam3'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-1'].parts['Beam3'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.04)
mdb.models['Delamination-forModalAnalysis-Case-1'].parts['Beam3'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-1'].constraints['Constraint-1'].setValues(
    positionTolerance=0.04)
mdb.models['Delamination-forModalAnalysis-Case-1'].constraints['Constraint-2'].setValues(
    positionTolerance=0.04)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model=
    'Delamination-forModalAnalysis-Case-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.Model(name='Delamination-forModalAnalysis-Case-2', objectToCopy=
    mdb.models['Delamination-Case-1'])
mdb.models['Delamination-forModalAnalysis-Case-2'].parts['Beam1'].seedEdgeBySize(
    deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-2'].parts['Beam1'].edges.getSequenceFromMask(
    ('[#ffffffff:7 #f ]', ), ), minSizeFactor=0.1, size=0.03412991299129913)
mdb.models['Delamination-forModalAnalysis-Case-2'].parts['Beam1'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-2'].parts['Beam2'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-2'].parts['Beam2'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.03412991299129913)
mdb.models['Delamination-forModalAnalysis-Case-2'].parts['Beam2'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-2'].parts['Beam3'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-2'].parts['Beam3'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.03412991299129913)
mdb.models['Delamination-forModalAnalysis-Case-2'].parts['Beam3'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-2'].constraints['Constraint-1'].setValues(
    positionTolerance=0.03412991299129913)
mdb.models['Delamination-forModalAnalysis-Case-2'].constraints['Constraint-2'].setValues(
    positionTolerance=0.03412991299129913)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model=
    'Delamination-forModalAnalysis-Case-2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-2', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.Model(name='Delamination-forModalAnalysis-Case-3', objectToCopy=
    mdb.models['Delamination-Case-1'])
mdb.models['Delamination-forModalAnalysis-Case-3'].parts['Beam1'].seedEdgeBySize(
    deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-3'].parts['Beam1'].edges.getSequenceFromMask(
    ('[#ffffffff:7 #f ]', ), ), minSizeFactor=0.1, size=0.020478547854785475)
mdb.models['Delamination-forModalAnalysis-Case-3'].parts['Beam1'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-3'].parts['Beam2'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-3'].parts['Beam2'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.020478547854785475)
mdb.models['Delamination-forModalAnalysis-Case-3'].parts['Beam2'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-3'].parts['Beam3'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-3'].parts['Beam3'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.020478547854785475)
mdb.models['Delamination-forModalAnalysis-Case-3'].parts['Beam3'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-3'].constraints['Constraint-1'].setValues(
    positionTolerance=0.020478547854785475)
mdb.models['Delamination-forModalAnalysis-Case-3'].constraints['Constraint-2'].setValues(
    positionTolerance=0.020478547854785475)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model=
    'Delamination-forModalAnalysis-Case-3', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-3', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-3'].submit(consistencyChecking=OFF)
mdb.Model(name='Delamination-forModalAnalysis-Case-4', objectToCopy=
    mdb.models['Delamination-Case-1'])
mdb.models['Delamination-forModalAnalysis-Case-4'].parts['Beam1'].seedEdgeBySize(
    deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-4'].parts['Beam1'].edges.getSequenceFromMask(
    ('[#ffffffff:7 #f ]', ), ), minSizeFactor=0.1, size=0.014625962596259624)
mdb.models['Delamination-forModalAnalysis-Case-4'].parts['Beam1'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-4'].parts['Beam2'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-4'].parts['Beam2'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.014625962596259624)
mdb.models['Delamination-forModalAnalysis-Case-4'].parts['Beam2'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-4'].parts['Beam3'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-4'].parts['Beam3'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.014625962596259624)
mdb.models['Delamination-forModalAnalysis-Case-4'].parts['Beam3'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-4'].constraints['Constraint-1'].setValues(
    positionTolerance=0.014625962596259624)
mdb.models['Delamination-forModalAnalysis-Case-4'].constraints['Constraint-2'].setValues(
    positionTolerance=0.014625962596259624)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model=
    'Delamination-forModalAnalysis-Case-4', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-4', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-4'].submit(consistencyChecking=OFF)
mdb.Model(name='Delamination-forModalAnalysis-Case-5', objectToCopy=
    mdb.models['Delamination-Case-1'])
mdb.models['Delamination-forModalAnalysis-Case-5'].parts['Beam1'].seedEdgeBySize(
    deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-5'].parts['Beam1'].edges.getSequenceFromMask(
    ('[#ffffffff:7 #f ]', ), ), minSizeFactor=0.1, size=0.011377637763776375)
mdb.models['Delamination-forModalAnalysis-Case-5'].parts['Beam1'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-5'].parts['Beam2'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-5'].parts['Beam2'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.011377637763776375)
mdb.models['Delamination-forModalAnalysis-Case-5'].parts['Beam2'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-5'].parts['Beam3'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-5'].parts['Beam3'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.011377637763776375)
mdb.models['Delamination-forModalAnalysis-Case-5'].parts['Beam3'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-5'].constraints['Constraint-1'].setValues(
    positionTolerance=0.011377637763776375)
mdb.models['Delamination-forModalAnalysis-Case-5'].constraints['Constraint-2'].setValues(
    positionTolerance=0.011377637763776375)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model=
    'Delamination-forModalAnalysis-Case-5', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-5', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-5'].submit(consistencyChecking=OFF)
mdb.Model(name='Delamination-forModalAnalysis-Case-6', objectToCopy=
    mdb.models['Delamination-Case-1'])
mdb.models['Delamination-forModalAnalysis-Case-6'].parts['Beam1'].seedEdgeBySize(
    deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-6'].parts['Beam1'].edges.getSequenceFromMask(
    ('[#ffffffff:7 #f ]', ), ), minSizeFactor=0.1, size=0.009308930893089304)
mdb.models['Delamination-forModalAnalysis-Case-6'].parts['Beam1'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-6'].parts['Beam2'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-6'].parts['Beam2'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.009308930893089304)
mdb.models['Delamination-forModalAnalysis-Case-6'].parts['Beam2'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-6'].parts['Beam3'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-6'].parts['Beam3'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.009308930893089304)
mdb.models['Delamination-forModalAnalysis-Case-6'].parts['Beam3'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-6'].constraints['Constraint-1'].setValues(
    positionTolerance=0.009308930893089304)
mdb.models['Delamination-forModalAnalysis-Case-6'].constraints['Constraint-2'].setValues(
    positionTolerance=0.009308930893089304)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model=
    'Delamination-forModalAnalysis-Case-6', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-6', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-6'].submit(consistencyChecking=OFF)
mdb.Model(name='Delamination-forModalAnalysis-Case-7', objectToCopy=
    mdb.models['Delamination-Case-1'])
mdb.models['Delamination-forModalAnalysis-Case-7'].parts['Beam1'].seedEdgeBySize(
    deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-7'].parts['Beam1'].edges.getSequenceFromMask(
    ('[#ffffffff:7 #f ]', ), ), minSizeFactor=0.1, size=0.007873787378737868)
mdb.models['Delamination-forModalAnalysis-Case-7'].parts['Beam1'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-7'].parts['Beam2'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-7'].parts['Beam2'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.007873787378737868)
mdb.models['Delamination-forModalAnalysis-Case-7'].parts['Beam2'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-7'].parts['Beam3'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-7'].parts['Beam3'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.007873787378737868)
mdb.models['Delamination-forModalAnalysis-Case-7'].parts['Beam3'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-7'].constraints['Constraint-1'].setValues(
    positionTolerance=0.007873787378737868)
mdb.models['Delamination-forModalAnalysis-Case-7'].constraints['Constraint-2'].setValues(
    positionTolerance=0.007873787378737868)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model=
    'Delamination-forModalAnalysis-Case-7', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-7', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-7'].submit(consistencyChecking=OFF)
mdb.Model(name='Delamination-forModalAnalysis-Case-8', objectToCopy=
    mdb.models['Delamination-Case-1'])
mdb.models['Delamination-forModalAnalysis-Case-8'].parts['Beam1'].seedEdgeBySize(
    deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-8'].parts['Beam1'].edges.getSequenceFromMask(
    ('[#ffffffff:7 #f ]', ), ), minSizeFactor=0.1, size=0.0068236823682368206)
mdb.models['Delamination-forModalAnalysis-Case-8'].parts['Beam1'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-8'].parts['Beam2'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-8'].parts['Beam2'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.0068236823682368206)
mdb.models['Delamination-forModalAnalysis-Case-8'].parts['Beam2'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-8'].parts['Beam3'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-8'].parts['Beam3'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.0068236823682368206)
mdb.models['Delamination-forModalAnalysis-Case-8'].parts['Beam3'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-8'].constraints['Constraint-1'].setValues(
    positionTolerance=0.0068236823682368206)
mdb.models['Delamination-forModalAnalysis-Case-8'].constraints['Constraint-2'].setValues(
    positionTolerance=0.0068236823682368206)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model=
    'Delamination-forModalAnalysis-Case-8', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-8', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-8'].submit(consistencyChecking=OFF)
mdb.Model(name='Delamination-forModalAnalysis-Case-9', objectToCopy=
    mdb.models['Delamination-Case-1'])
mdb.models['Delamination-forModalAnalysis-Case-9'].parts['Beam1'].seedEdgeBySize(
    deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-9'].parts['Beam1'].edges.getSequenceFromMask(
    ('[#ffffffff:7 #f ]', ), ), minSizeFactor=0.1, size=0.006022102210221016)
mdb.models['Delamination-forModalAnalysis-Case-9'].parts['Beam1'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-9'].parts['Beam2'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-9'].parts['Beam2'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.006022102210221016)
mdb.models['Delamination-forModalAnalysis-Case-9'].parts['Beam2'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-9'].parts['Beam3'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-9'].parts['Beam3'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.006022102210221016)
mdb.models['Delamination-forModalAnalysis-Case-9'].parts['Beam3'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-9'].constraints['Constraint-1'].setValues(
    positionTolerance=0.006022102210221016)
mdb.models['Delamination-forModalAnalysis-Case-9'].constraints['Constraint-2'].setValues(
    positionTolerance=0.006022102210221016)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model=
    'Delamination-forModalAnalysis-Case-9', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-9', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-9'].submit(consistencyChecking=OFF)
mdb.Model(name='Delamination-forModalAnalysis-Case-10', objectToCopy=
    mdb.models['Delamination-Case-1'])
mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam1'].seedEdgeBySize(
    deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam1'].edges.getSequenceFromMask(
    ('[#ffffffff:7 #f ]', ), ), minSizeFactor=0.1, size=0.005388538853885384)
mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam1'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam2'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam2'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.005388538853885384)
mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam2'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam3'].seedEdgeBySize(
    constraint=FINER, deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam3'].edges.getSequenceFromMask(
    ('[#ff ]', ), ), minSizeFactor=0.1, size=0.005388538853885384)
mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam3'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-10'].constraints['Constraint-1'].setValues(
    positionTolerance=0.005388538853885384)
mdb.models['Delamination-forModalAnalysis-Case-10'].constraints['Constraint-2'].setValues(
    positionTolerance=0.005388538853885384)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model=
    'Delamination-forModalAnalysis-Case-10', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-10', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-10'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'PC1044', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\795593\\OneDrive\\Desktop\\Delamination-detection-in-composite-laminates-using-deep-learning\\Abacus models\\Mesh study\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'PC1044', 'handle': 12148, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 28.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16340.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Aug 11 00:15:32 2022', 
    'jobName': 'Job-1'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'PC1044', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\795593\\OneDrive\\Desktop\\Delamination-detection-in-composite-laminates-using-deep-learning\\Abacus models\\Mesh study\\Job-2.odb', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'PC1044', 'handle': 9048, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 44.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16340.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_COMPLETED, {'time': 'Thu Aug 11 00:16:23 2022', 
    'jobName': 'Job-2'})
mdb.jobs['Job-3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'PC1044', 'handle': 0, 'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\795593\\OneDrive\\Desktop\\Delamination-detection-in-composite-laminates-using-deep-learning\\Abacus models\\Mesh study\\Job-3.odb', 
    'jobName': 'Job-3'})
mdb.jobs['Job-3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-3'})
mdb.jobs['Job-10']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-10.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-10'})
mdb.jobs['Job-10']._Message(JOB_ABORTED, {})
mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam1'].deleteMesh(
    regions=
    mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam1'].faces.getSequenceFromMask(
    ('[#ffffffff:3 #7f ]', ), ))
mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam1'].seedEdgeBySize(
    deviationFactor=0.1, edges=
    mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam1'].edges.getSequenceFromMask(
    ('[#ffffffff:7 #f ]', ), ), minSizeFactor=0.1, size=0.004)
mdb.models['Delamination-forModalAnalysis-Case-10'].parts['Beam1'].generateMesh(
    )
mdb.models['Delamination-forModalAnalysis-Case-10'].rootAssembly.regenerate()
# Save by 795593 on 2022_08_11-01.04.07; build 2022 2021_09_15-22.27.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-11']
del mdb.jobs['Job-12']
del mdb.jobs['Job-13']
del mdb.jobs['Job-14']
del mdb.jobs['Job-15']
del mdb.jobs['Job-16']
del mdb.jobs['Job-17']
del mdb.jobs['Job-18']
del mdb.jobs['Job-19']
del mdb.jobs['Job-20']
del mdb.jobs['Job-21']
del mdb.jobs['Job-22']
del mdb.jobs['Job-23']
del mdb.jobs['Job-24']
del mdb.jobs['Job-25']
del mdb.jobs['Job-26']
del mdb.jobs['Job-27']
del mdb.jobs['Job-28']
del mdb.jobs['Job-29']
del mdb.jobs['Job-30']
del mdb.jobs['Job-31']
del mdb.jobs['Job-32']
del mdb.jobs['Job-33']
del mdb.jobs['Job-34']
del mdb.jobs['Job-35']
del mdb.jobs['Job-36']
del mdb.jobs['Job-37']
del mdb.jobs['Job-38']
del mdb.jobs['Job-39']
del mdb.jobs['Job-40']
del mdb.jobs['Job-41']
del mdb.jobs['Job-42']
del mdb.jobs['Job-43']
del mdb.jobs['Job-44']
del mdb.jobs['Job-45']
# Save by 795593 on 2022_08_11-11.19.45; build 2022 2021_09_15-22.27.30 176069
